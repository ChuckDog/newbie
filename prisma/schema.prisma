// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"

  // Enable Full-Text Search which is only available for PostgreSQL.
  previewFeatures = ["fullTextSearch"]

  // For production deployment.
  // binaryTargets   = ["native", "rhel-openssl-1.0.x"]
  // binaryTargets   = ["native", "linux-arm64-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model AwsConfiguration {
//   id                    String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   project               String                 @unique
//   status                AwsConfigurationStatus // Only one active configuration
//   region                String
//   accessKeyId           String
//   secretAccessKey       String
//   sqsLogQueueUrl        String? // For logger
//   sqsTaskQueueUrl       String? // For task management microservice
//   pinpointApplicationId String?
//   pinpointFromAddress   String? // For email message
//   pinpointSenderId      String? // For text message
//   createdAt             DateTime               @default(now())
//   updatedAt             DateTime               @updatedAt
// }

// enum AwsConfigurationStatus {
//   ACTIVE
//   INACTIVE
// }

//       ! Notification         //
// ⌄  ⌄  ⌄  ⌄  ⌄  ⌄  ⌄  ⌄  ⌄  ⌄ //
// * EmailNotification          //
// * SmsNotification            //
// ⌄  ⌄  ⌄  ⌄  ⌄  ⌄  ⌄  ⌄  ⌄  ⌄ //

model EmailNotification {
  id                Int      @id @default(autoincrement())
  payload           Json //  The notification content for one phone.
  pinpointRequestId String? // RequestId is the Pinpoint request id. One request can contain many text messages.
  pinpointMessageId String? // MessageId is the text message id.
  pinpointResponse  Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  // configuration     NotificationConfiguration @relation(fields: [configurationId], references: [id])
  // configurationId   String                    @db.Uuid
}

model SmsNotification {
  id                Int      @id @default(autoincrement())
  payload           Json //  The notification content for one phone.
  pinpointRequestId String? // RequestId is the Pinpoint request id. One request can contain many text messages.
  pinpointMessageId String? // MessageId is the text message id.
  pinpointResponse  Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// ! Task Management   //
// ⌄  ⌄  ⌄  ⌄  ⌄  ⌄  ⌄ //
// * Task              //
// ⌄  ⌄  ⌄  ⌄  ⌄  ⌄  ⌄ //

model Task {
  id           Int       @id @default(autoincrement())
  type         TaskType
  group        String? // Provided by task microservice's client.
  payload      Json // Task content
  state        TaskState @default(PENDING)
  sqsMessageId String?
  sqsResponse  Json?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

enum TaskType {
  DATATRANS_BATCH_PROCESSING
  DATATRANS_STREAM_PROCESSING
}

enum TaskState {
  PENDING
  SUCCEEDED
  FAILED
  CANCELED
}

//     ! Account       //
// ⌄  ⌄  ⌄  ⌄  ⌄  ⌄  ⌄ //
// * User              //
// * UserJwt           //
// * UserProfile       //
// * VerificationCode  //
// * Role              //
// * Permission        //
// * Organization      //
// ⌄  ⌄  ⌄  ⌄  ⌄  ⌄  ⌄ //

model User {
  // [1] The 'User' and 'VerificationCode' models are both used for logging in.
  // [2] The 'User' is designed for long-term use and the 'VerificationCode' is designed for short-term use.
  // [3] Actually, the 'User' model should be named 'UserPassword' and the 'VerificationCode' should be named 'UserVerificationCode'.

  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String?       @unique
  phone       String?       @unique
  username    String?       @unique
  password    String? // automatic hashing
  status      UserStatus    @default(ACTIVE)
  lastLoginAt DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  profiles    UserProfile[]
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

model UserJwt {
  id        Int           @id @default(autoincrement())
  userId    String
  token     String
  status    UserJwtStatus
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

enum UserJwtStatus {
  ACTIVE
  INACTIVE
}

model UserProfile {
  id             String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  givenName      String?
  middleName     String?
  familyName     String?
  suffix         String?
  birthday       DateTime?
  gender         String?
  race           UserProfileRaceType?
  ethnicity      UserProfileEthnicityType?
  hasPCP         Boolean? // Primary Care Physician  
  address        String?
  zipcode        String?
  geoJSON        Json? // https://datatracker.ietf.org/doc/html/rfc7946
  websites       Json? // {'facebook': 'https://www.facebook.com/grace', 'twitter': 'https://twitter.com/elonmusk'}
  picture        String?
  organizationId String?                   @db.Uuid
  createdAt      DateTime                  @default(now())
  updatedAt      DateTime                  @updatedAt
  user           User                      @relation(fields: [userId], references: [id])
  userId         String                    @db.Uuid
}

enum UserProfileRaceType {
  AA
  WHITE
  ASIAN
  MULTI
  OTHER
}

enum UserProfileEthnicityType {
  HISPANIC
  NOT_HISPANIC
}

model VerificationCode {
  id        Int                    @id @default(autoincrement())
  email     String?
  phone     String?
  code      String
  status    VerificationCodeStatus
  use       VerificationCodeUse
  expiredAt DateTime
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt
}

enum VerificationCodeStatus {
  ACTIVE
  INACTIVE
}

enum VerificationCodeUse {
  UNKNOWN
  // For generating JWT.
  LOGIN_BY_EMAIL
  LOGIN_BY_PHONE
  // For closing and recovering account.
  CLOSE_ACCOUNT_BY_EMAIL
  CLOSE_ACCOUNT_BY_PHONE
  RECOVER_ACCOUNT_BY_EMAIL
  RECOVER_ACCOUNT_BY_PHONE
  // For other operations
  BIND_EMAIL
  BIND_PHONE
  CHANGE_PASSWORD
  RESET_PASSWORD
}

model Role {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Permission {
  id            String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  resource      String
  allowedAction PermissionAllowedAction
  attributes    String
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
}

enum PermissionAllowedAction {
  CREATE
  UPDATE
  RETRIEVE
  DELETE
}

model User_Role {
  userId String @db.Uuid
  roleId String @db.Uuid

  @@id([userId, roleId])
}

model User_Permission {
  userId       String @db.Uuid
  permissionId String @db.Uuid

  @@id([userId, permissionId])
}

model Role_Permission {
  roleId       String @db.Uuid
  permissionId String @db.Uuid

  @@id([roleId, permissionId])
}

model Organization {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//  ! Project Management  //
// ⌄  ⌄  ⌄  ⌄  ⌄  ⌄  ⌄  ⌄ //
// * Project              //
// * ProjectCheckpoint    //
// * ProjectEnvironment   //
// * InfrastructureStack  //
// ⌄  ⌄  ⌄  ⌄  ⌄  ⌄  ⌄  ⌄ //

model Project {
  id                   String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String                @unique
  state                ProjectState          @default(PLANNING)
  clientName           String?
  clientEmail          String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  checkpoints          ProjectCheckpoint[]
  environments         ProjectEnvironment[]
  cloudformationStacks CloudFormationStack[]
  pulumiStacks         PulumiStack[]
}

enum ProjectState {
  PLANNING
  DESIGNING
  DEVELOPING
  DONE
}

model ProjectCheckpoint {
  id        Int                    @id @default(autoincrement())
  type      ProjectCheckpointType
  state     ProjectCheckpointState @default(TODO)
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt
  Project   Project                @relation(fields: [projectId], references: [id])
  projectId String                 @db.Uuid

  @@unique([type, projectId])
}

enum ProjectCheckpointType {
  MANAGER_PRODUCT_REQUIREMENTS
  MANAGER_PROJECT_KANBAN
  DESIGNER_WIREFRAMES
  DESIGNER_PROTOTYPES
  DEVELOPER_ACCOUNT_APPLE
  DEVELOPER_ACCOUNT_GOOGLE
  DEVELOPER_BACKEND_REPO
  DEVELOPER_BACKEND_FRAMEWORK
  DEVELOPER_BACKEND_DATABASE
  DEVELOPER_BACKEND_API
  DEVELOPER_FRONTEND_REPO
  DEVELOPER_FRONTEND_FRAMEWORK
  DEVELOPER_INFRASTRUCTURE
}

enum ProjectCheckpointState {
  TODO
  PROCESSING
  DONE
}

model ProjectEnvironment {
  id                  Int                    @id @default(autoincrement())
  type                ProjectEnvironmentType
  awsAccountId        String?
  awsProfile          String?
  awsAccessKeyId      String?
  awsSecretAccessKey  String? // automatic hashing
  awsRegion           String?
  s3ForCloudformation String?
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  project             Project                @relation(fields: [projectId], references: [id])
  projectId           String                 @db.Uuid

  @@unique([type, projectId])
}

enum ProjectEnvironmentType {
  DEVELOPMENT
  STAGING
  PRODUCTION
}

model CloudFormationStack {
  id                  String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String?                  @unique // Set default value via prisma middleware.
  type                CloudFormationStackType
  params              Json?
  state               CloudFormationStackState @default(PENDING)
  environment         ProjectEnvironmentType
  createStackOutput   Json?
  describeStackOutput Json?
  deleteStackOutput   Json?
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
  project             Project                  @relation(fields: [projectId], references: [id])
  projectId           String                   @db.Uuid
}

enum CloudFormationStackType {
  CICD_BUILD
  CICD_PIPELINE
  CICD_REPOSITORY
  COMPUTING_FARGATE
  NETWORK_HIPAA
  PRODUCT_DATA_ENGINE
  PRODUCT_MESSAGE_TRACKER
}

enum CloudFormationStackState {
  PENDING
  BUILD
  DESTROYED
}

model PulumiStack {
  id            String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String?                @unique // Set default value via prisma middleware.
  type          PulumiStackType
  params        Json?
  state         PulumiStackState       @default(PENDING)
  environment   ProjectEnvironmentType
  upResult      Json?
  destroyResult Json?
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  project       Project                @relation(fields: [projectId], references: [id])
  projectId     String                 @db.Uuid
}

enum PulumiStackType {
  AWS_CLOUDFRONT
  AWS_CODE_COMMIT
  AWS_ECR
  AWS_ECS
  AWS_EKS
  AWS_IAM_USER
  AWS_RDS
  AWS_S3
  AWS_SQS
  AWS_VPC
  AWS_WAF
  COMPUTING_FARGATE
  NETWORK_HIPAA
}

enum PulumiStackState {
  PENDING
  BUILD_PROCESSING
  BUILD_SUCCEEDED
  BUILD_FAILED
  DESTROY_PROCESSING
  DESTROY_SUCCEEDED
  DESTROY_FAILED
}

//            ! Engine D               //
// ⌄  ⌄  ⌄  ⌄  ⌄  ⌄  ⌄  ⌄  ⌄  ⌄  ⌄  ⌄  //
// * PostgresqlDatasource              //
// * PostgresqlDatasourceConstraint    //
// * PostgresqlDatasourceTable         //
// * PostgresqlDatasourceTableColumn   //
// ----------------------------------- //
// * ElasticsearchDatasource           //
// * ElasticsearchDatasourceIndex      //
// * ElasticsearchDatasourceIndexField //
// ----------------------------------- //
// * DatatransPipeline                 //
// ----------------------------------- //
// * ElasticsearchDataboard            //
// ⌄  ⌄  ⌄  ⌄  ⌄  ⌄  ⌄  ⌄  ⌄  ⌄  ⌄  ⌄  //

model PostgresqlDatasource {
  id          String                           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  host        String
  port        Int
  database    String
  schema      String
  state       PostgresqlDatasourceState        @default(NOT_LOADED)
  createdAt   DateTime                         @default(now())
  updatedAt   DateTime                         @updatedAt
  tables      PostgresqlDatasourceTable[]
  constraints PostgresqlDatasourceConstraint[]
}

enum PostgresqlDatasourceState {
  LOADED
  NOT_LOADED
}

model PostgresqlDatasourceConstraint {
  id           Int                                   @id @default(autoincrement())
  schema       String // The schema name.
  table        String // The table name.
  keyColumn    String // The table's primary key column or foreign key column.
  keyType      PostgresqlDatasourceConstraintKeyType
  foreignTable String? // Has value when the type is FOREIGN_KEY. 
  createdAt    DateTime                              @default(now())
  updatedAt    DateTime                              @updatedAt
  datasource   PostgresqlDatasource                  @relation(fields: [datasourceId], references: [id], onDelete: Cascade)
  datasourceId String                                @db.Uuid
}

enum PostgresqlDatasourceConstraintKeyType {
  PRIMARY_KEY
  FOREIGN_KEY
}

model PostgresqlDatasourceTable {
  id                 Int                               @id @default(autoincrement())
  name               String
  createdAt          DateTime                          @default(now())
  updatedAt          DateTime                          @updatedAt
  datasource         PostgresqlDatasource              @relation(fields: [datasourceId], references: [id], onDelete: Cascade)
  datasourceId       String                            @db.Uuid
  columns            PostgresqlDatasourceTableColumn[]
  datatransPipelines DatatransPipeline[]
}

model PostgresqlDatasourceTableColumn {
  id              Int                       @id @default(autoincrement())
  name            String // The column name.
  type            String
  ordinalPosition Int // The sort number of the column in the table.
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
  table           PostgresqlDatasourceTable @relation(fields: [tableId], references: [id], onDelete: Cascade)
  tableId         Int
}

model ElasticsearchDatasource {
  id        String                         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  node      String
  state     ElasticsearchDatasourceState   @default(NOT_LOADED)
  createdAt DateTime                       @default(now())
  updatedAt DateTime                       @updatedAt
  indices   ElasticsearchDatasourceIndex[]
}

enum ElasticsearchDatasourceState {
  LOADED
  NOT_LOADED
}

model ElasticsearchDatasourceIndex {
  id                 Int                                 @id @default(autoincrement())
  name               String
  state              ElasticsearchDatasourceIndexState   @default(NO_MAPPING)
  createdAt          DateTime                            @default(now())
  updatedAt          DateTime                            @updatedAt
  datasource         ElasticsearchDatasource             @relation(fields: [datasourceId], references: [id], onDelete: Cascade)
  datasourceId       String                              @db.Uuid
  fields             ElasticsearchDatasourceIndexField[]
  databoards         ElasticsearchDataboard[]
  datatransPipelines DatatransPipeline[]
}

enum ElasticsearchDatasourceIndexState {
  NO_MAPPING
  HAS_MAPPING
}

model ElasticsearchDatasourceIndexField {
  id               Int                            @id @default(autoincrement())
  name             String // The field name. 
  type             String?
  fields           Json?
  properties       Json?
  createdAt        DateTime                       @default(now())
  updatedAt        DateTime                       @updatedAt
  index            ElasticsearchDatasourceIndex   @relation(fields: [indexId], references: [id], onDelete: Cascade)
  indexId          Int
  databoardColumns ElasticsearchDataboardColumn[]
}

model DatatransPipeline {
  id                String                       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String
  hasManyTables     String[] // The child tables should be loaded into the payload to be transported.
  belongsToTables   String[] // The parent tables should be loaded into the payload to be transported.
  createdAt         DateTime                     @default(now())
  updatedAt         DateTime                     @updatedAt
  fromTable         PostgresqlDatasourceTable    @relation(fields: [fromTableId], references: [id], onDelete: Cascade)
  fromTableId       Int
  toIndex           ElasticsearchDatasourceIndex @relation(fields: [toIndexId], references: [id])
  toIndexId         Int
  datatransMissions DatatransMission[]
}

model DatatransMission {
  id                  String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  state               DatatransMissionState @default(PENDING)
  numberOfRecords     Int // Number of records that will be sent from datasource table
  numberOfBatches     Int
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  datatransPipeline   DatatransPipeline     @relation(fields: [datatransPipelineId], references: [id])
  datatransPipelineId String                @db.Uuid
}

enum DatatransMissionState {
  PENDING
  STARTED
  STOPPED
}

model ElasticsearchDataboard {
  id                String                         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String
  state             ElasticsearchDataboardState    @default(NOT_LOADED)
  description       String?
  createdAt         DateTime                       @default(now())
  updatedAt         DateTime                       @updatedAt
  datasourceIndex   ElasticsearchDatasourceIndex   @relation(fields: [datasourceIndexId], references: [id])
  datasourceIndexId Int
  columns           ElasticsearchDataboardColumn[]
}

enum ElasticsearchDataboardState {
  LOADED
  NOT_LOADED
}

model ElasticsearchDataboardColumn {
  id                     Int                                   @id @default(autoincrement())
  name                   String
  ordinalPosition        Int? // The sort number of the column on the board. The first position is 1.
  visible                Boolean                               @default(true)
  width                  Int?
  copyable               Boolean?
  searchable             Boolean?
  sortable               Boolean?
  tooltip                String?
  formatter              ElasticsearchDataboardColumnFormatter @default(NONE)
  createdAt              DateTime                              @default(now())
  updatedAt              DateTime                              @updatedAt
  databoard              ElasticsearchDataboard                @relation(fields: [databoardId], references: [id], onDelete: Cascade)
  databoardId            String                                @db.Uuid
  datasourceIndexField   ElasticsearchDatasourceIndexField     @relation(fields: [datasourceIndexFieldId], references: [id])
  datasourceIndexFieldId Int
}

enum ElasticsearchDataboardColumnFormatter {
  NONE
  OVER_DUE
  PAST_DUE
  DATE_TIME
  HIGHLIGHT_INCOMPLETE
  CURRENCY
}
