// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"

  // Enable Full-Text Search which is only available for PostgreSQL.
  previewFeatures = ["multiSchema", "fullTextSearch"]

  // For production deployment.
  // binaryTargets   = ["native", "rhel-openssl-1.0.x"]
  // binaryTargets   = ["native", "linux-arm64-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["microservice/location", "microservice/notification", "microservice/task", "microservice/verification-code", "microservice/workflow", "application/account"]
}

// !! ------------------------------------------------------------ //
// !!            [Microservice] Location models                    //
// !! ------------------------------------------------------------ //
// * Location                                                      //
// * ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ //

model Location {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  site      String?
  address   String?
  address2  String?
  city      String?
  state     String?
  zipcode   String?
  geoJSON   Json? // https://datatracker.ietf.org/doc/html/rfc7946
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?  @db.Uuid

  @@schema("microservice/location")
}

// !! ------------------------------------------------------------ //
// !!            [Microservice] Notification models                //
// !! ------------------------------------------------------------ //
// * EmailNotification                                             //
// * SmsNotification                                               //
// * ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ //

model EmailNotification {
  id                Int      @id @default(autoincrement())
  payload           Json // The notification content for one email address.
  pinpointRequestId String? // RequestId is the Pinpoint request id. One request can contain multiple text messages.
  pinpointMessageId String? // MessageId is the email message id.
  pinpointResponse  Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@schema("microservice/notification")
}

model SmsNotification {
  id                Int      @id @default(autoincrement())
  payload           Json // The notification content for one phone.
  pinpointRequestId String? // RequestId is the Pinpoint request id. One request can contain multiple text messages.
  pinpointMessageId String? // MessageId is the text message id.
  pinpointResponse  Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@schema("microservice/notification")
}

// ! ------------------------------------------------------------ //
// !           [Microservice] Task Management models              //
// ! ------------------------------------------------------------ //
// * Task (This is an example model.)                             //
// * ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄  //

model Task {
  id           Int       @id @default(autoincrement())
  state        TaskState @default(PENDING)
  group        String? // Provided by task microservice's client.
  payload      Json // Task content
  sqsMessageId String?
  sqsResponse  Json?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@schema("microservice/task")
}

enum TaskState {
  PENDING
  DONE

  @@schema("microservice/task")
}

// ! ------------------------------------------------------------ //
// !           [Microservice] Verification Code models            //
// ! ------------------------------------------------------------ //
// * VerificationCode                                             //
// * ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄  //

model VerificationCode {
  id        Int                    @id @default(autoincrement())
  email     String?
  phone     String?
  code      String
  status    VerificationCodeStatus
  use       VerificationCodeUse
  expiredAt DateTime
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt

  @@schema("microservice/verification-code")
}

enum VerificationCodeStatus {
  ACTIVE
  INACTIVE

  @@schema("microservice/verification-code")
}

enum VerificationCodeUse {
  UNKNOWN
  // For generating JWT.
  LOGIN_BY_EMAIL
  LOGIN_BY_PHONE
  // For closing and recovering account.
  CLOSE_ACCOUNT_BY_EMAIL
  CLOSE_ACCOUNT_BY_PHONE
  RECOVER_ACCOUNT_BY_EMAIL
  RECOVER_ACCOUNT_BY_PHONE
  // For other operations
  BIND_EMAIL
  BIND_PHONE
  CHANGE_PASSWORD
  RESET_PASSWORD

  @@schema("microservice/verification-code")
}

// ! ------------------------------------------------------------ //
// !             [Microservice] Workflow models                   //
// ! ------------------------------------------------------------ //
// * WorkflowStep                                                 //
// * WorkflowState                                                //
// * WorkflowRoute                                                //
// * ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄  //

model WorkflowStep {
  id        Int      @id @default(autoincrement())
  step      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@schema("microservice/workflow")
}

model WorkflowState {
  id        Int      @id @default(autoincrement())
  state     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@schema("microservice/workflow")
}

model WorkflowRoute {
  id         Int      @id @default(autoincrement())
  startSign  Boolean? @unique
  step       String
  state      String
  nextStep   String
  nextRoleId String?  @db.Uuid // The next role to take over the next step.
  nextUserId String?  @db.Uuid // The next user to take over the next step.
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([step, state])
  @@schema("microservice/workflow")
}

// ! ------------------------------------------------------------ //
// !                [Application] Account models                  //
// ! ------------------------------------------------------------ //
// * Organization                                                 //
// * UserToRole                                                   //
// * Role                                                         //
// * User                                                         //
// * UserJwt                                                      //
// * UserProfile                                                  //
// * RoutePermission(unused)                                      //
// * ComponentPermission(unused)                                  //
// * EndpointPermission(unused)                                   //
// * Permission                                                   //
// * UserToRole                                                   //
// * UserToPermission                                             //
// * RoleToPermission                                             //
// * ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄  //

model Organization {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roles     Role[]
  users     User[]

  @@schema("application/account")
}

model UserToRole {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.Uuid
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId    String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, roleId])
  @@schema("application/account")
}

model Role {
  // A role is a subgroup of a user group with some specified permissions.

  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @db.Uuid
  roleToUsers    UserToRole[]

  @@unique([name, organizationId])
  @@schema("application/account")
}

model User {
  // [1] The 'User' and 'VerificationCode' models are both used for logging in.
  // [2] The 'User' is designed for long-term use and the 'VerificationCode' is designed for short-term use.
  // [3] Actually, the 'User' model should be named 'UserPassword' and the 'VerificationCode' should be named 'UserVerificationCode'.

  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email          String?       @unique
  phone          String?       @unique
  username       String?       @unique
  password       String? // automatic hashing
  status         UserStatus    @default(ACTIVE)
  lastLoginAt    DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?       @db.Uuid
  profiles       UserProfile[]
  userToRoles    UserToRole[]
  locations      Location[]

  @@schema("application/account")
}

enum UserStatus {
  ACTIVE
  INACTIVE

  @@schema("application/account")
}

model UserToken {
  id        Int             @id @default(autoincrement())
  userId    String          @db.Uuid
  token     String
  status    UserTokenStatus @default(ACTIVE)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@schema("application/account")
}

enum UserTokenStatus {
  ACTIVE
  INACTIVE

  @@schema("application/account")
}

model UserProfile {
  id             String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  givenName      String?
  middleName     String?
  familyName     String?
  suffix         String?
  birthday       DateTime?
  gender         UserProfileGender?
  emails         Json[]
  phones         Json[]
  websites       Json? // {'facebook': 'https://www.facebook.com/grace', 'twitter': 'https://twitter.com/elonmusk'}
  picture        String?
  organizationId String?            @db.Uuid
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  user           User               @relation(fields: [userId], references: [id])
  userId         String             @db.Uuid

  @@schema("application/account")
}

enum UserProfileGender {
  MALE
  FEMALE
  INTERSEX

  @@schema("application/account")
}

model RoutePermission {
  id                String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  route             String
  trustedEntityType TrustedEntityType
  trustedEntityId   String            @db.Uuid
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@schema("application/account")
}

model ComponentPermission {
  id                String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  component         String
  trustedEntityType TrustedEntityType
  trustedEntityId   String            @db.Uuid
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@schema("application/account")
}

model EndpointPermission {
  id                String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  endpoint          String
  trustedEntityType TrustedEntityType
  trustedEntityId   String            @db.Uuid
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@schema("application/account")
}

model Permission {
  // Permission of Resource
  id                Int               @id @default(autoincrement())
  action            PermissionAction
  resource          String
  where             Json? // an object of where expression meets the Prisma syntax.
  inverted          Boolean? // indicates whether rule allows or forbids something
  reason            String? // message which explains why rule is forbidden
  trustedEntityType TrustedEntityType
  trustedEntityId   String            @db.Uuid
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@schema("application/account")
}

enum PermissionAction {
  manage // it represents any action
  create
  delete
  read
  update

  @@schema("application/account")
}

enum TrustedEntityType {
  ORGANIZATION
  ROLE
  USER

  @@schema("application/account")
}
