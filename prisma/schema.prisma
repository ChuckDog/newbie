// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  // Enable Full-Text Search which is only available for PostgreSQL.
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// Account tables
//
// [1] The 'User' and 'VerificationCode' models are both used for logging in.
// [2] The 'User' is designed for long-term use and the 'VerificationCode' is designed for short-term use.
// [3] Actually, the 'User' model should be named 'UserPassword' and the 'VerificationCode' should be named 'UserVerificationCode'.
//

model User {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String?    @unique
  phone        String?    @unique
  username     String?    @unique
  passwordHash String?
  status       UserStatus
  lastLoginAt  DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  profiles     Profile[]
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

model VerificationCode {
  id        Int                    @id @default(autoincrement())
  userId    String?
  email     String?
  phone     String?
  code      String
  use       VerificationCodeUse
  status    VerificationCodeStatus
  expiredAt DateTime
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt
}

enum VerificationCodeUse {
  UNKNOWN
  // For generating JWT.
  LOGIN_BY_EMAIL
  LOGIN_BY_PHONE
  // For closing and recovering account.
  CLOSE_ACCOUNT_BY_EMAIL
  CLOSE_ACCOUNT_BY_PHONE
  RECOVER_ACCOUNT_BY_EMAIL
  RECOVER_ACCOUNT_BY_PHONE
  // For other operations
  BIND_EMAIL
  BIND_PHONE
  CHANGE_PASSWORD
  RESET_PASSWORD
}

enum VerificationCodeStatus {
  ACTIVE
  INACTIVE
}

model JsonWebToken {
  id        Int       @id @default(autoincrement())
  userId    String
  token     String
  status    JwtStatus
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum JwtStatus {
  ACTIVE
  INACTIVE
}

model Profile {
  id             String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  givenName      String?
  middleName     String?
  familyName     String?
  suffix         String?
  birthday       DateTime?
  gender         String?
  race           RaceType?
  ethnicity      EthnicityType?
  hasPCP         Boolean? // Primary Care Physician  
  address        String?
  zipcode        String?
  geoJSON        Json? // https://datatracker.ietf.org/doc/html/rfc7946
  websites       Json? // {'facebook': 'https://www.facebook.com/grace', 'twitter': 'https://twitter.com/elonmusk'}
  picture        String?
  organizationId String?        @db.Uuid
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  user           User           @relation(fields: [userId], references: [id])
  userId         String         @db.Uuid
}

enum RaceType {
  AA
  WHITE
  ASIAN
  MULTI
  OTHER
}

enum EthnicityType {
  HISPANIC
  NOT_HISPANIC
}

model Role {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Permission {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  resource   String
  action     Action
  attributes String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum Action {
  CREATE
  UPDATE
  RETRIEVE
  DELETE
}

model User_Role {
  userId String @db.Uuid
  roleId String @db.Uuid

  @@id([userId, roleId])
}

model User_Permission {
  userId       String @db.Uuid
  permissionId String @db.Uuid

  @@id([userId, permissionId])
}

model Role_Permission {
  roleId       String @db.Uuid
  permissionId String @db.Uuid

  @@id([roleId, permissionId])
}

//
// Organization tables
//

model Organization {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//
// SQS Message tables
//

model SqsMessage {
  id           Int      @id @default(autoincrement())
  messageId    String?
  queueUrl     String
  context      String?
  message      Json
  responseData Json?
  responseErr  Json?
  createdAt    DateTime @default(now()) // GMT
}

model SqsMessageBatch {
  id            Int      @id @default(autoincrement())
  queueUrl      String
  context       String?
  message       Json
  responseData  Json?
  responseErr   Json?
  successfulCnt Int
  failedCnt     Int
  createdAt     DateTime @default(now())
}

//
// Project management tables
//

model Project {
  id                   String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String                @unique
  status               ProjectStatus
  clientName           String?
  clientEmail          String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  checkpoints          ProjectCheckpoint[]
  environments         ProjectEnvironment[]
  infrastructureStacks InfrastructureStack[]
  microservices        Microservice[]
}

enum ProjectStatus {
  IN_DEVELOPMENT
  IN_MAINTENANCE
  ON_HOLD
  END
}

model ProjectCheckpoint {
  type      ProjectCheckpointType
  content   String?
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
  projectId String                @db.Uuid
  Project   Project               @relation(fields: [projectId], references: [id])

  @@id([type, projectId])
}

enum ProjectCheckpointType {
  MGMT_JIRA
  DESIGN_FIGMA
  ACCOUNT_APPLE
  ACCOUNT_GOOGLE
  CODE_FE_REPO
  CODE_FE_FRAMEWORK
  CODE_BE_REPO
  CODE_BE_FRAMEWORK
  CODE_BE_DATABASE
  CODE_BE_API
  INFRASTRUCTURE
}

model ProjectEnvironment {
  type               ProjectEnvironmentType
  awsAccountId       String?
  awsProfile         String?
  awsAccessKeyId     String?
  awsSecretAccessKey String? // hash
  awsRegion          String?
  cfTemplateS3       String?
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
  projectId          String                 @db.Uuid
  project            Project                @relation(fields: [projectId], references: [id])

  @@id([type, projectId])
}

enum ProjectEnvironmentType {
  DEVELOPMENT
  STAGING
  PRODUCTION
}

model InfrastructureStack {
  id                String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String                     @unique
  params            Json?
  type              InfrastructureStackType
  status            InfrastructureStackStatus
  manager           InfrastructureStackManager
  pulumiProjectName String?
  // We use 'stackProjectName' & 'name' to identify infrastructure stack(cloud resource stack).
  // The stackProject Name is a concept of Pulumi. We set it with Project->name.
  buildResult       Json?
  destroyResult     Json?
  createdAt         DateTime                   @default(now())
  updatedAt         DateTime                   @updatedAt
  projectId         String                     @db.Uuid
  project           Project                    @relation(fields: [projectId], references: [id])
  environment       ProjectEnvironmentType
}

enum InfrastructureStackManager {
  PULUMI
  CLOUDFORMATION
}

enum InfrastructureStackType {
  // CloudFormation stack types
  C_CICD_BUILD
  C_CICD_PIPELINE
  C_CICD_REPOSITORY
  C_COMPUTING_FARGATE
  C_NETWORK_HIPAA
  C_PRODUCT_IDE
  C_PRODUCT_MESSAGE_TRACKER
  // Pulumi stack types
  P_AWS_CLOUDFRONT
  P_AWS_CODE_COMMIT
  P_AWS_ECR
  P_AWS_ECS
  P_AWS_EKS
  P_AWS_IAM_USER
  P_AWS_RDS
  P_AWS_S3
  P_AWS_SQS
  P_AWS_VPC
  P_AWS_WAF
  P_COMPUTING_FARGATE
  P_NETWORK_HIPAA
}

enum InfrastructureStackStatus {
  PREPARING
  BUILDING
  BUILD_SUCCEEDED
  BUILD_FAILED
  DESTROYING
  DESTROY_SUCCEEDED
  DESTROY_FAILED
  DELETED
}

model Microservice {
  id          String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String                 @unique
  status      MicroserviceStatus
  environment ProjectEnvironmentType
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  projectId   String                 @db.Uuid
  project     Project                @relation(fields: [projectId], references: [id])
}

enum MicroserviceStatus {
  PREPARING
  RUNNING
  STOPPED
}

//
// Connection
//

model Connection {
  id        String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String           @unique
  status    ConnectionStatus
  type      ConnectionType
  host      String
  port      Int
  database  String
  schema    String
  username  String
  password  String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

enum ConnectionStatus {
  UNKNOWN
  SUCCEEDED
  FAILED
}

enum ConnectionType {
  MySQL
  PostgreSQL
  Elasticsearch
}

//
// Searchview
//

model Searchview {
  id           Int              @id @default(autoincrement())
  name         String
  indexName    String
  description  String?
  type         SearchviewType
  status       SearchviewStatus
  layoutConfig Json?
  indexJson    Json?
  processedAt  DateTime?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  deletedAt    DateTime?
}

enum SearchviewType {
  ACTIVE
  INACTIVE
}

enum SearchviewStatus {
  ACTIVE
  INACTIVE
}

model ExpandColumn {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ideStatus       String?
  ideScriptStatus String?
  type            String?
  value           String?
  associationId   String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
}

model IdeIndexConfig {
  id                     Int                  @id @default(autoincrement())
  schemaName             String
  tableName              String
  indexName              String
  buildBulkBodyBatchSize Int
  bulkEsDataInterval     Int
  syncDataByCronInterval Int                  @default(0)
  sqlFilterCondition     Boolean              @default(true)
  status                 IdeIndexConfigStatus
  tablesInfo             Json
  relationTree           Json
  deploymentConfig       Json
  lastSyncDataByCronAt   DateTime
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
}

enum IdeIndexConfigStatus {
  INITED
  DEPLOYED
  DISABLED
}

model IdeDataSyncQueue {
  id                       Int                     @id @default(autoincrement())
  schemaName               String?
  tableName                String?
  type                     String?
  status                   IdeDataSyncQueueStatus?
  primaryKeys              Json?
  primaryKeyValues         Json?
  changeDataCaptureBatchId String?
  oldRow                   Json?
  newRow                   Json?
  createdAt                DateTime                @default(now())
  updatedAt                DateTime                @updatedAt
}

enum IdeDataSyncQueueStatus {
  PENDING
  PROCESSED
  RECEIVED
  FAILED
}

model IdeCalDependencyLog {
  id                       Int                        @id @default(autoincrement())
  schemaName               String?
  tableName                String?
  status                   IdeCalDependencyLogStatus?
  dataPK                   String?
  changeDataCaptureBatchId String?
  calDependentsBatchId     String?
  oldRow                   Json?
  newRow                   Json?
  receivedAt               DateTime?
  processedAt              DateTime?
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
}

enum IdeCalDependencyLogStatus {
  PENDING
  PROCESSED
  RECEIVED
  FAILED
}

model IdeSyncDataLog {
  id                   Int                   @id @default(autoincrement())
  status               IdeSyncDataLogStatus?
  dataPK               String?
  calDependentsBatchId String?
  syncDataBatchId      String?
  receivedAt           DateTime?
  processedAt          DateTime?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  indexConfigId        String?
}

enum IdeSyncDataLogStatus {
  PENDING
  PROCESSED
  RECEIVED
  FAILED
}

model IdeSyncDataByIndexLog {
  id                       Int                          @id @default(autoincrement())
  status                   IdeSyncDataByIndexLogStatus?
  dataPK                   String?
  triggerBatchId           String?
  changeDataCaptureBatchId String?
  syncDataBatchId          String?
  receivedAt               DateTime?
  processedAt              DateTime?
  createdAt                DateTime                     @default(now())
  updatedAt                DateTime                     @updatedAt
  indexConfigId            String?
}

enum IdeSyncDataByIndexLogStatus {
  PENDING
  PROCESSED
  RECEIVED
  FAILED
}

model IdeSyncDataErrorLog {
  id        Int      @id @default(autoincrement())
  keyword   String?
  context   String?
  error     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model IdeCalDataLog {
  id                   Int                  @id @default(autoincrement())
  status               IdeCalDataLogStatus?
  dataPK               String?
  calDependentsBatchId String?
  calDataBatchId       String?
  receivedAt           DateTime?
  processedAt          DateTime?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  indexConfigId        String?
}

enum IdeCalDataLogStatus {
  PENDING
  PROCESSED
  RECEIVED
  FAILED
}

model IdeCalDataByIndexLog {
  id                       Int                         @id @default(autoincrement())
  status                   IdeCalDataByIndexLogStatus?
  dataPK                   String?
  triggerBatchId           String?
  changeDataCaptureBatchId String?
  calDataBatchId           String?
  receivedAt               DateTime?
  processedAt              DateTime?
  createdAt                DateTime                    @default(now())
  updatedAt                DateTime                    @updatedAt
  indexConfigId            String?
}

enum IdeCalDataByIndexLogStatus {
  PENDING
  PROCESSED
  RECEIVED
  FAILED
}

model IdeSyncDataToEsLog {
  id                  Int                       @id @default(autoincrement())
  status              IdeSyncDataToEsLogStatus?
  dataPK              String?
  esId                String?
  calDataBatchId      String?
  syncDataToESBatchId String?
  action              String?
  receivedAt          DateTime?
  processedAt         DateTime?
  createdAt           DateTime                  @default(now())
  updatedAt           DateTime                  @updatedAt
  indexConfigId       String?
}

enum IdeSyncDataToEsLogStatus {
  PENDING
  PROCESSED
  RECEIVED
  FAILED
}

model IdeSyncDataToEsByIndexLog {
  id                  Int                              @id @default(autoincrement())
  status              IdeSyncDataToEsByIndexLogStatus?
  dataPK              String?
  esId                String?
  calDataBatchId      String?
  syncDataToESBatchId String?
  action              String?
  receivedAt          DateTime?
  processedAt         DateTime?
  createdAt           DateTime                         @default(now())
  updatedAt           DateTime                         @updatedAt
  indexConfigId       String?
}

enum IdeSyncDataToEsByIndexLogStatus {
  PENDING
  PROCESSED
  RECEIVED
  FAILED
}

model IdeSyncDataToEsErrorLog {
  id        Int      @id @default(autoincrement())
  keyword   String?
  context   String?
  error     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model IdeSyncPerfLog {
  id        Int      @id @default(autoincrement())
  logType   String?
  logId     String?
  error     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  indexConfigId String?
  schemaName    String?
  tableName     String?
  indexName     String?

  dataPK String?
  esId   String?
  param  Json?

  changeDataCapture_createdAt   DateTime?
  changeDataCapture_processedAt DateTime?

  calDependents_createdAt   DateTime?
  calDependents_receivedAt  DateTime?
  calDependents_processedAt DateTime?

  calData_createdAt   DateTime?
  calData_receivedAt  DateTime?
  calData_processedAt DateTime?

  calDataByIndex_createdAt   DateTime?
  calDataByIndex_receivedAt  DateTime?
  calDataByIndex_processedAt DateTime?

  syncDataToES_createdAt   DateTime?
  syncDataToES_receivedAt  DateTime?
  syncDataToES_processedAt DateTime?

  syncDataToESByIndex_createdAt   DateTime?
  syncDataToESByIndex_receivedAt  DateTime?
  syncDataToESByIndex_processedAt DateTime?

  changeDataCapture_duration Float?

  calDependents_duration       Float?
  calDependents_sqs_duration   Float?
  calDependents_total_duration Float?

  calData_duration       Float?
  calData_sqs_duration   Float?
  calData_total_duration Float?

  calDataByIndex_duration       Float?
  calDataByIndex_sqs_duration   Float?
  calDataByIndex_total_duration Float?

  syncDataToES_duration       Float?
  syncDataToES_sqs_duration   Float?
  syncDataToES_total_duration Float?

  syncDataToESByIndex_duration       Float?
  syncDataToESByIndex_sqs_duration   Float?
  syncDataToESByIndex_total_duration Float?
}

//
// Datasource
//

model PostgresqlDatasource {
  id                       String                              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  host                     String
  port                     Int
  database                 String
  schema                   String
  createdAt                DateTime                            @default(now())
  updatedAt                DateTime                            @updatedAt
  postgresqlTableColumns   PostgresqlDatasourceTableColumn[]
  postgresqlTableRelations PostgresqlDatasourceTableRelation[]
}

model PostgresqlDatasourceTableColumn {
  id              String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  table           String
  column          String
  columnType      String
  ordinalPosition Int
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  datasource      PostgresqlDatasource @relation(fields: [datasourceId], references: [id])
  datasourceId    String               @db.Uuid
}

enum PostgresqlDatasourceTableColumnType {
  STRING
  NUMBER
  JSON
}

model PostgresqlDatasourceTableRelation {
  id            Int                                            @id @default(autoincrement())
  schema        String
  table         String
  column        String // It is primary key or foreign key.
  columnKeyType PostgresqlDatasourceTableRelationColumnKeyType
  foreignTable  String? // Has value when the type is FOREIGN_KEY. 
  createdAt     DateTime                                       @default(now())
  updatedAt     DateTime                                       @updatedAt
  datasource    PostgresqlDatasource                           @relation(fields: [datasourceId], references: [id])
  datasourceId  String                                         @db.Uuid
}

enum PostgresqlDatasourceTableRelationColumnKeyType {
  PRIMARY_KEY
  FOREIGN_KEY
}

model ElasticsearchDatasource {
  id                      String                              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  node                    String
  createdAt               DateTime                            @default(now())
  updatedAt               DateTime                            @updatedAt
  elasticsearchTypeFields ElasticsearchDatasourceIndexField[]
}

model ElasticsearchDatasourceIndexField {
  id           String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  index        String
  field        String
  fieldBody    Json
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt
  datasource   ElasticsearchDatasource @relation(fields: [datasourceId], references: [id])
  datasourceId String                  @db.Uuid
  databoard    ElasticsearchDataboard? @relation(fields: [databoardId], references: [id])
  databoardId  String?                 @db.Uuid
}

//
// Databoard
//

model ElasticsearchDataboard {
  id                    String                              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                  String
  description           String?
  status                ElasticsearchDataboardStatus
  indexJson             Json?
  layoutConfig          Json?
  visualSettings        Json?
  createdAt             DateTime                            @default(now())
  updatedAt             DateTime                            @updatedAt
  datasourceIndexFields ElasticsearchDatasourceIndexField[]
}

enum ElasticsearchDataboardStatus {
  ACTIVE
  INACTIVE
}

//
// DataPipeline
//

model Datapipe {
  id                     String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                   String
  status                 DatapipeStatus
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  datapipeColumnMappings DatapipeColumnMapping[]
}

enum DatapipeStatus {
  PREPARING
  BUILDING
  BUILD_SUCCEEDED
  BUILD_FAILED
  DESTROYING
  DESTROY_SUCCEEDED
  DESTROY_FAILED
  DELETED
}

model DatapipeColumnMapping {
  id                      String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  expression              String?
  fromDatacatalogColumnId String   @db.Uuid
  toDatacatalogColumnId   String   @db.Uuid
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  datapipe                Datapipe @relation(fields: [datapipeId], references: [id])
  datapipeId              String   @db.Uuid
}

// model DataboardActionMapping {
//   id          Int                     @id @default(autoincrement())
//   fromSchema  String
//   fromTable   String
//   fromAction  DataboardActionFromType
//   toSchema    String?
//   toTable     String
//   toAction    DataboardActionToType
//   createdAt   DateTime                @default(now())
//   updatedAt   DateTime                @updatedAt
//   databoard   Databoard               @relation(fields: [databoardId], references: [id])
//   databoardId String                  @db.Uuid
// }

// enum DataboardActionFromType {
//   CREATE
//   UPDATE
//   DELETE
// }

// enum DataboardActionToType {
//   CREATE
//   UPDATE
//   DELETE
// }
