// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"

  // Enable Full-Text Search which is only available for PostgreSQL.
  previewFeatures = ["multiSchema", "fullTextSearch"]

  // For production deployment.
  // binaryTargets   = ["native", "rhel-openssl-1.0.x"]
  // binaryTargets   = ["native", "linux-arm64-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["microservice/location", "microservice/notification", "microservice/task", "microservice/workflow", "application/account", "application/engined", "application/fmgmt", "application/pmgmt", "application/recruitment"]
}

// !! ------------------------------------------------------------ //
// !!            [Microservice] Location models                    //
// !! ------------------------------------------------------------ //
// * Location                                                      //
// * ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ //

model Location {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  site        String?
  address     String?
  address2    String?
  city        String?
  state       String?
  zipcode     String?
  geoJSON     Json? // https://datatracker.ietf.org/doc/html/rfc7946
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?    @db.Uuid
  candidate   Candidate? @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  candidateId String?    @unique @db.Uuid
  job         Job?       @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId       String?    @unique @db.Uuid

  @@schema("microservice/location")
}

// !! ------------------------------------------------------------ //
// !!            [Microservice] Notification models                //
// !! ------------------------------------------------------------ //
// * EmailNotification                                             //
// * SmsNotification                                               //
// * ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ //

model EmailNotification {
  id                Int      @id @default(autoincrement())
  payload           Json // The notification content for one email address.
  pinpointRequestId String? // RequestId is the Pinpoint request id. One request can contain multiple text messages.
  pinpointMessageId String? // MessageId is the email message id.
  pinpointResponse  Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@schema("microservice/notification")
}

model SmsNotification {
  id                Int      @id @default(autoincrement())
  payload           Json // The notification content for one phone.
  pinpointRequestId String? // RequestId is the Pinpoint request id. One request can contain multiple text messages.
  pinpointMessageId String? // MessageId is the text message id.
  pinpointResponse  Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@schema("microservice/notification")
}

// ! ------------------------------------------------------------ //
// !           [Microservice] Task Management models              //
// ! ------------------------------------------------------------ //
// * Task                                                         //
// * ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄  //

model Task {
  id           Int       @id @default(autoincrement())
  type         TaskType
  group        String? // Provided by task microservice's client.
  payload      Json // Task content
  state        TaskState @default(PENDING)
  sqsMessageId String?
  sqsResponse  Json?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@schema("microservice/task")
}

enum TaskType {
  DATATRANS_BATCH_PROCESSING
  DATATRANS_STREAM_PROCESSING

  @@schema("microservice/task")
}

enum TaskState {
  PENDING
  SUCCEEDED
  FAILED
  CANCELED

  @@schema("microservice/task")
}

// ! ------------------------------------------------------------ //
// !           [Microservice] Verification Code models            //
// ! ------------------------------------------------------------ //
// * VerificationCode                                             //
// * ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄  //

model VerificationCode {
  id        Int                    @id @default(autoincrement())
  email     String?
  phone     String?
  code      String
  status    VerificationCodeStatus
  use       VerificationCodeUse
  expiredAt DateTime
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt

  @@schema("application/account")
}

enum VerificationCodeStatus {
  ACTIVE
  INACTIVE

  @@schema("application/account")
}

enum VerificationCodeUse {
  UNKNOWN
  // For generating JWT.
  LOGIN_BY_EMAIL
  LOGIN_BY_PHONE
  // For closing and recovering account.
  CLOSE_ACCOUNT_BY_EMAIL
  CLOSE_ACCOUNT_BY_PHONE
  RECOVER_ACCOUNT_BY_EMAIL
  RECOVER_ACCOUNT_BY_PHONE
  // For other operations
  BIND_EMAIL
  BIND_PHONE
  CHANGE_PASSWORD
  RESET_PASSWORD

  @@schema("application/account")
}

// ! ------------------------------------------------------------ //
// !             [Microservice] Workflow models                   //
// ! ------------------------------------------------------------ //
// * Workflow                                                     //
// * WorkflowStep                                                 //
// * WorkflowState                                                //
// * ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄  //

model Workflow {
  id         Int      @id @default(autoincrement())
  startSign  Boolean? @unique
  step       String
  state      String
  nextStep   String
  nextRoleId String?  @db.Uuid // The next role to take over the next step.
  nextUserId String?  @db.Uuid // The next user to take over the next step.
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([step, state])
  @@schema("microservice/workflow")
}

model WorkflowStep {
  id        Int      @id @default(autoincrement())
  step      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@schema("microservice/workflow")
}

model WorkflowState {
  id        Int      @id @default(autoincrement())
  state     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@schema("microservice/workflow")
}

// ! ------------------------------------------------------------ //
// !                [Application] Account models                  //
// ! ------------------------------------------------------------ //
// * Organization                                                 //
// * UserToRole                                                   //
// * Role                                                         //
// * User                                                         //
// * UserJwt                                                      //
// * UserProfile                                                  //
// * RoutePermission(unused)                                      //
// * ComponentPermission(unused)                                  //
// * EndpointPermission(unused)                                   //
// * Permission                                                   //
// * UserToRole                                                   //
// * UserToPermission                                             //
// * RoleToPermission                                             //
// * ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄  //

model Organization {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roles     Role[]
  users     User[]

  @@schema("application/account")
}

model UserToRole {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.Uuid
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId    String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, roleId])
  @@schema("application/account")
}

model Role {
  // A role is a subgroup of a user group with some specified permissions.

  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @db.Uuid
  roleToUsers    UserToRole[]

  @@unique([name, organizationId])
  @@schema("application/account")
}

model User {
  // [1] The 'User' and 'VerificationCode' models are both used for logging in.
  // [2] The 'User' is designed for long-term use and the 'VerificationCode' is designed for short-term use.
  // [3] Actually, the 'User' model should be named 'UserPassword' and the 'VerificationCode' should be named 'UserVerificationCode'.

  id              String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email           String?                 @unique
  phone           String?                 @unique
  username        String?                 @unique
  password        String? // automatic hashing
  status          UserStatus              @default(ACTIVE)
  lastLoginAt     DateTime?
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  organization    Organization?           @relation(fields: [organizationId], references: [id])
  organizationId  String?                 @db.Uuid
  profiles        UserProfile[]
  userToRoles     UserToRole[]
  locations       Location[]
  holdingTestings JobApplicationTesting[]

  @@schema("application/account")
}

enum UserStatus {
  ACTIVE
  INACTIVE

  @@schema("application/account")
}

model UserToken {
  id        Int             @id @default(autoincrement())
  userId    String          @db.Uuid
  token     String
  status    UserTokenStatus @default(ACTIVE)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@schema("application/account")
}

enum UserTokenStatus {
  ACTIVE
  INACTIVE

  @@schema("application/account")
}

model UserProfile {
  id             String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  givenName      String?
  middleName     String?
  familyName     String?
  suffix         String?
  birthday       DateTime?
  gender         UserProfileGender?
  emails         Json[]
  phones         Json[]
  websites       Json? // {'facebook': 'https://www.facebook.com/grace', 'twitter': 'https://twitter.com/elonmusk'}
  picture        String?
  organizationId String?            @db.Uuid
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  user           User               @relation(fields: [userId], references: [id])
  userId         String             @db.Uuid

  @@schema("application/account")
}

enum UserProfileGender {
  MALE
  FEMALE
  INTERSEX

  @@schema("application/account")
}

model RoutePermission {
  id                String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  route             String
  trustedEntityType TrustedEntityType
  trustedEntityId   String            @db.Uuid
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@schema("application/account")
}

model ComponentPermission {
  id                String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  component         String
  trustedEntityType TrustedEntityType
  trustedEntityId   String            @db.Uuid
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@schema("application/account")
}

model EndpointPermission {
  id                String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  endpoint          String
  trustedEntityType TrustedEntityType
  trustedEntityId   String            @db.Uuid
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@schema("application/account")
}

model Permission {
  // Permission of Resource
  id                Int               @id @default(autoincrement())
  action            PermissionAction
  resource          String
  where             Json? // an object of where expression meets the Prisma syntax.
  inverted          Boolean? // indicates whether rule allows or forbids something
  reason            String? // message which explains why rule is forbidden
  trustedEntityType TrustedEntityType
  trustedEntityId   String            @db.Uuid
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@schema("application/account")
}

enum PermissionAction {
  manage // it represents any action
  create
  delete
  read
  update

  @@schema("application/account")
}

enum TrustedEntityType {
  ORGANIZATION
  ROLE
  USER

  @@schema("application/account")
}

// ! ------------------------------------------------------------ //
// !               [Application] Engine D models                  //
// ! ------------------------------------------------------------ //
// * PostgresqlDatasource                                         //
// * PostgresqlDatasourceConstraint                               //
// * PostgresqlDatasourceTable                                    //
// * PostgresqlDatasourceTableColumn                              //
// * ------------------------------------------------------------ //
// * ElasticsearchDatasource                                      //
// * ElasticsearchDatasourceIndex                                 //
// * ElasticsearchDatasourceIndexField                            //
// * ------------------------------------------------------------ //
// * DatatransPipeline                                            //
// * DatatransMission                                             //
// * ------------------------------------------------------------ //
// * ElasticsearchDataboard                                       //
// * ElasticsearchDataboardColumn                                 //
// * ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄  //

model PostgresqlDatasource {
  id          String                           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  host        String
  port        Int
  database    String
  schema      String
  state       PostgresqlDatasourceState        @default(NOT_LOADED)
  createdAt   DateTime                         @default(now())
  updatedAt   DateTime                         @updatedAt
  tables      PostgresqlDatasourceTable[]
  constraints PostgresqlDatasourceConstraint[]

  @@schema("application/engined")
}

enum PostgresqlDatasourceState {
  LOADED
  NOT_LOADED

  @@schema("application/engined")
}

model PostgresqlDatasourceConstraint {
  id           Int                                   @id @default(autoincrement())
  schema       String // The schema name.
  table        String // The table name.
  keyColumn    String // The table's primary key column or foreign key column.
  keyType      PostgresqlDatasourceConstraintKeyType
  foreignTable String? // Has value when the type is FOREIGN_KEY. 
  createdAt    DateTime                              @default(now())
  updatedAt    DateTime                              @updatedAt
  datasource   PostgresqlDatasource                  @relation(fields: [datasourceId], references: [id], onDelete: Cascade)
  datasourceId String                                @db.Uuid

  @@schema("application/engined")
}

enum PostgresqlDatasourceConstraintKeyType {
  PRIMARY_KEY
  FOREIGN_KEY

  @@schema("application/engined")
}

model PostgresqlDatasourceTable {
  id                 Int                               @id @default(autoincrement())
  name               String
  schema             String
  createdAt          DateTime                          @default(now())
  updatedAt          DateTime                          @updatedAt
  datasource         PostgresqlDatasource              @relation(fields: [datasourceId], references: [id], onDelete: Cascade)
  datasourceId       String                            @db.Uuid
  columns            PostgresqlDatasourceTableColumn[]
  datatransPipelines DatatransPipeline[]

  @@schema("application/engined")
}

model PostgresqlDatasourceTableColumn {
  id              Int                       @id @default(autoincrement())
  name            String // The column name.
  type            String
  constraint      String?
  ordinalPosition Int? // The sort number of the column in the table.
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
  table           PostgresqlDatasourceTable @relation(fields: [tableId], references: [id], onDelete: Cascade)
  tableId         Int

  @@schema("application/engined")
}

model ElasticsearchDatasource {
  id        String                         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  node      String
  state     ElasticsearchDatasourceState   @default(NOT_LOADED)
  createdAt DateTime                       @default(now())
  updatedAt DateTime                       @updatedAt
  indices   ElasticsearchDatasourceIndex[]

  @@schema("application/engined")
}

enum ElasticsearchDatasourceState {
  LOADED
  NOT_LOADED

  @@schema("application/engined")
}

model ElasticsearchDatasourceIndex {
  id                 Int                                 @id @default(autoincrement())
  name               String
  state              ElasticsearchDatasourceIndexState   @default(NO_MAPPING)
  createdAt          DateTime                            @default(now())
  updatedAt          DateTime                            @updatedAt
  datasource         ElasticsearchDatasource             @relation(fields: [datasourceId], references: [id], onDelete: Cascade)
  datasourceId       String                              @db.Uuid
  fields             ElasticsearchDatasourceIndexField[]
  databoards         ElasticsearchDataboard[]
  datatransPipelines DatatransPipeline[]

  @@schema("application/engined")
}

enum ElasticsearchDatasourceIndexState {
  NO_MAPPING
  HAS_MAPPING

  @@schema("application/engined")
}

model ElasticsearchDatasourceIndexField {
  id               Int                            @id @default(autoincrement())
  name             String // The field name. 
  type             String?
  fields           Json?
  properties       Json?
  createdAt        DateTime                       @default(now())
  updatedAt        DateTime                       @updatedAt
  index            ElasticsearchDatasourceIndex   @relation(fields: [indexId], references: [id], onDelete: Cascade)
  indexId          Int
  databoardColumns ElasticsearchDataboardColumn[]

  @@schema("application/engined")
}

model DatatransPipeline {
  id                String                       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String
  hasManyTables     String[] // The child tables should be loaded into the payload to be transported.
  belongsToTables   String[] // The parent tables should be loaded into the payload to be transported.
  createdAt         DateTime                     @default(now())
  updatedAt         DateTime                     @updatedAt
  fromTable         PostgresqlDatasourceTable    @relation(fields: [fromTableId], references: [id], onDelete: Cascade)
  fromTableId       Int
  toIndex           ElasticsearchDatasourceIndex @relation(fields: [toIndexId], references: [id])
  toIndexId         Int
  datatransMissions DatatransMission[]

  @@schema("application/engined")
}

model DatatransMission {
  id                  String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  state               DatatransMissionState @default(PENDING)
  numberOfRecords     Int // Number of records that will be sent from datasource table
  numberOfBatches     Int
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  datatransPipeline   DatatransPipeline     @relation(fields: [datatransPipelineId], references: [id])
  datatransPipelineId String                @db.Uuid

  @@schema("application/engined")
}

enum DatatransMissionState {
  PENDING
  STARTED
  STOPPED

  @@schema("application/engined")
}

model ElasticsearchDataboard {
  id                String                         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String
  state             ElasticsearchDataboardState    @default(NOT_LOADED)
  description       String?
  createdAt         DateTime                       @default(now())
  updatedAt         DateTime                       @updatedAt
  datasourceIndex   ElasticsearchDatasourceIndex   @relation(fields: [datasourceIndexId], references: [id])
  datasourceIndexId Int
  columns           ElasticsearchDataboardColumn[]

  @@schema("application/engined")
}

enum ElasticsearchDataboardState {
  LOADED
  NOT_LOADED

  @@schema("application/engined")
}

model ElasticsearchDataboardColumn {
  id                     Int                                   @id @default(autoincrement())
  name                   String
  ordinalPosition        Int? // The sort number of the column on the board. The first position is 1.
  visible                Boolean                               @default(true)
  width                  Int?
  copyable               Boolean?
  searchable             Boolean?
  sortable               Boolean?
  tooltip                String?
  formatter              ElasticsearchDataboardColumnFormatter @default(NONE)
  createdAt              DateTime                              @default(now())
  updatedAt              DateTime                              @updatedAt
  databoard              ElasticsearchDataboard                @relation(fields: [databoardId], references: [id], onDelete: Cascade)
  databoardId            String                                @db.Uuid
  datasourceIndexField   ElasticsearchDatasourceIndexField     @relation(fields: [datasourceIndexFieldId], references: [id])
  datasourceIndexFieldId Int

  @@schema("application/engined")
}

enum ElasticsearchDataboardColumnFormatter {
  NONE
  OVER_DUE
  PAST_DUE
  DATE_TIME
  HIGHLIGHT_INCOMPLETE
  CURRENCY

  @@schema("application/engined")
}

// !! ------------------------------------------------------------ //
// !!            [Application] File Management models             //
// !! ------------------------------------------------------------ //
// * File                                                          //
// * Folder                                                        //
// * ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ //

model File {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  url       String
  mimeType  String?
  s3Bucket  String?
  s3Path    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  folder    Folder?  @relation(fields: [folderId], references: [id])
  folderId  String?  @db.Uuid

  @@schema("application/fmgmt")
}

model Folder {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  parentId  String?  @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  files     File[]

  @@schema("application/fmgmt")
}

// ! ------------------------------------------------------------ //
// !          [Application] Project Management models             //
// ! ------------------------------------------------------------ //
// * Project                                                      //
// * ProjectCheckpoint                                            //
// * ProjectEnvironment                                           //
// * CloudFormationStack                                          //
// * PulumiStack                                                  //
// * ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄  //

model Project {
  id                   String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String                @unique
  state                ProjectState          @default(PLANNING)
  clientName           String?
  clientEmail          String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  checkpoints          ProjectCheckpoint[]
  environments         ProjectEnvironment[]
  cloudformationStacks CloudFormationStack[]
  pulumiStacks         PulumiStack[]

  @@schema("application/pmgmt")
}

enum ProjectState {
  PLANNING
  DESIGNING
  DEVELOPING
  DONE

  @@schema("application/pmgmt")
}

model ProjectCheckpoint {
  id        Int                    @id @default(autoincrement())
  type      ProjectCheckpointType
  state     ProjectCheckpointState @default(TODO)
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt
  Project   Project                @relation(fields: [projectId], references: [id])
  projectId String                 @db.Uuid

  @@unique([type, projectId])
  @@schema("application/pmgmt")
}

enum ProjectCheckpointType {
  MANAGER_PRODUCT_REQUIREMENTS
  MANAGER_PROJECT_KANBAN
  DESIGNER_WIREFRAMES
  DESIGNER_PROTOTYPES
  DEVELOPER_ACCOUNT_APPLE
  DEVELOPER_ACCOUNT_GOOGLE
  DEVELOPER_BACKEND_REPO
  DEVELOPER_BACKEND_FRAMEWORK
  DEVELOPER_BACKEND_DATABASE
  DEVELOPER_BACKEND_API
  DEVELOPER_FRONTEND_REPO
  DEVELOPER_FRONTEND_FRAMEWORK
  DEVELOPER_INFRASTRUCTURE

  @@schema("application/pmgmt")
}

enum ProjectCheckpointState {
  TODO
  PROCESSING
  DONE

  @@schema("application/pmgmt")
}

model ProjectEnvironment {
  id                  Int                    @id @default(autoincrement())
  type                ProjectEnvironmentType
  awsAccountId        String?
  awsProfile          String?
  awsAccessKeyId      String?
  awsSecretAccessKey  String? // automatic hashing
  awsRegion           String?
  s3ForCloudformation String?
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  project             Project                @relation(fields: [projectId], references: [id])
  projectId           String                 @db.Uuid

  @@unique([type, projectId])
  @@schema("application/pmgmt")
}

enum ProjectEnvironmentType {
  DEVELOPMENT
  STAGING
  PRODUCTION

  @@schema("application/pmgmt")
}

model CloudFormationStack {
  id                  String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String?                  @unique // Set default value via prisma middleware.
  type                CloudFormationStackType
  params              Json?
  state               CloudFormationStackState @default(PENDING)
  environment         ProjectEnvironmentType
  createStackOutput   Json?
  describeStackOutput Json?
  deleteStackOutput   Json?
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
  project             Project                  @relation(fields: [projectId], references: [id])
  projectId           String                   @db.Uuid

  @@schema("application/pmgmt")
}

enum CloudFormationStackType {
  CICD_BUILD
  CICD_PIPELINE
  CICD_REPOSITORY
  COMPUTING_FARGATE
  NETWORK_HIPAA
  PRODUCT_DATA_ENGINE
  PRODUCT_MESSAGE_TRACKER

  @@schema("application/pmgmt")
}

enum CloudFormationStackState {
  PENDING
  BUILD
  DESTROYED

  @@schema("application/pmgmt")
}

model PulumiStack {
  id            String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String?                @unique // Set default value via prisma middleware.
  type          PulumiStackType
  params        Json?
  state         PulumiStackState       @default(PENDING)
  environment   ProjectEnvironmentType
  upResult      Json?
  destroyResult Json?
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  project       Project                @relation(fields: [projectId], references: [id])
  projectId     String                 @db.Uuid

  @@schema("application/pmgmt")
}

enum PulumiStackType {
  AWS_CLOUDFRONT
  AWS_CODE_COMMIT
  AWS_ECR
  AWS_ECS
  AWS_EKS
  AWS_IAM_USER
  AWS_RDS
  AWS_S3
  AWS_SQS
  AWS_VPC
  AWS_WAF
  COMPUTING_FARGATE
  NETWORK_HIPAA

  @@schema("application/pmgmt")
}

enum PulumiStackState {
  PENDING
  BUILD_PROCESSING
  BUILD_SUCCEEDED
  BUILD_FAILED
  DESTROY_PROCESSING
  DESTROY_SUCCEEDED
  DESTROY_FAILED

  @@schema("application/pmgmt")
}

// ! ------------------------------------------------------------ //
// !             [Application] Recruitment models                 //
// ! ------------------------------------------------------------ //
// * Candidate                                                    //
// * CandidateLocation                                            //
// * CandidateProfile                                             //
// * CandidateCertification                                       //
// * CandidateTraining                                            //
// * Job                                                          //
// * JobApplication                                               //
// * JobApplicationNote                                           //
// * JobApplicationTask                                           //
// * JobApplicationTesting                                        //
// * JobApplicationTestingAttachment                              //
// * JobApplicationTestingLog                                     //
// * ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄  //

model Candidate {
  id              String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status          CandidateStatus          @default(ACTIVE)
  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @updatedAt
  profile         CandidateProfile?
  location        Location?
  certifications  CandidateCertification[]
  trainings       CandidateTraining[]
  jobApplications JobApplication[]

  @@schema("application/recruitment")
}

enum CandidateStatus {
  ACTIVE
  INACTIVE

  @@schema("application/recruitment")
}

model CandidateProfile {
  id           String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  uniqueNumber String
  givenName    String
  middleName   String?
  familyName   String
  fullName     String?
  birthday     DateTime?
  gender       CandidateProfileGender?
  emails       Json[]
  phones       Json[]
  websites     Json? // {'facebook': 'https://www.facebook.com/grace', 'twitter': 'https://twitter.com/elonmusk'}
  picture      String?
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt
  candidate    Candidate               @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  candidateId  String                  @unique @db.Uuid

  @@schema("application/recruitment")
}

enum CandidateProfileGender {
  MALE
  FEMALE
  INTERSEX

  @@schema("application/recruitment")
}

model CandidateCertification {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  candidateId String    @db.Uuid

  @@schema("application/recruitment")
}

model CandidateTraining {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  candidateId String    @db.Uuid

  @@schema("application/recruitment")
}

model Job {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code        String
  type        JobType
  position    String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  location    Location?

  @@schema("application/recruitment")
}

enum JobType {
  Hourly
  Salaried

  @@schema("application/recruitment")
}

model JobApplication {
  id          String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  state       String?
  jobType     JobType
  jobCode     String? // Only available when jobType is Hourly.
  jobSite     String
  referredBy  String // This field should user.name or user.id
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
  candidate   Candidate               @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  candidateId String                  @db.Uuid
  notes       JobApplicationNote[]
  tasks       JobApplicationTask[]
  testings    JobApplicationTesting[]

  @@schema("application/recruitment")
}

model JobApplicationNote {
  id               Int            @id @default(autoincrement())
  reporter         String?
  reporterUserId   String         @db.Uuid
  reporterComment  String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  jobApplication   JobApplication @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
  jobApplicationId String         @db.Uuid

  @@schema("application/recruitment")
}

model JobApplicationTask {
  id               Int                     @id @default(autoincrement())
  reporter         String?
  reporterUserId   String                  @db.Uuid
  reporterComment  String
  assignee         String?
  assigneeUserId   String                  @db.Uuid
  state            JobApplicationTaskState @default(PENDING)
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt
  jobApplication   JobApplication          @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
  jobApplicationId String                  @db.Uuid

  @@schema("application/recruitment")
}

enum JobApplicationTaskState {
  PENDING
  DONE

  @@schema("application/recruitment")
}

model JobApplicationTesting {
  id                  String                            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  state               String
  type                String
  site                String?
  appointmentStartsAt DateTime?
  appointmentEndsAt   DateTime?
  processedByUserIds  String[] // Store id of users who have processed this testing.
  createdAt           DateTime                          @default(now())
  updatedAt           DateTime                          @updatedAt
  jobApplication      JobApplication                    @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
  jobApplicationId    String                            @db.Uuid
  beingHeldByUser     User?                             @relation(fields: [beingHeldByUserId], references: [id])
  beingHeldByUserId   String?                           @db.Uuid
  attachments         JobApplicationTestingAttachment[]
  workflows           JobApplicationTestingWorkflow[]

  @@schema("application/recruitment")
}

model JobApplicationTestingAttachment {
  id        Int                   @id @default(autoincrement())
  name      String
  url       String
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
  testing   JobApplicationTesting @relation(fields: [testingId], references: [id], onDelete: Cascade)
  testingId String                @db.Uuid

  @@schema("application/recruitment")
}

model JobApplicationTestingWorkflow {
  id                Int                   @id @default(autoincrement())
  step              String
  state             String
  nextStep          String
  nextRoleId        String?               @db.Uuid
  processedByUserId String                @db.Uuid
  comment           String?
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  testing           JobApplicationTesting @relation(fields: [testingId], references: [id], onDelete: Cascade)
  testingId         String                @db.Uuid

  @@schema("application/recruitment")
}
