// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"

  // Enable Full-Text Search which is only available for PostgreSQL.
  previewFeatures = ["multiSchema", "fullTextSearch"]

  // For production deployment.
  // binaryTargets   = ["native", "rhel-openssl-1.0.x"]
  // binaryTargets   = ["native", "linux-arm64-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["microservice/notification", "microservice/task", "application/account", "application/engined", "application/pmgmt", "application/recruitment"]
}

// !! ------------------------------------------------------------ //
// !!            [Microservice] Notification models                //
// !! ------------------------------------------------------------ //
// * EmailNotification                                             //
// * SmsNotification                                               //
// * ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ //

model EmailNotification {
  id                Int      @id @default(autoincrement())
  payload           Json //  The notification content for one email address.
  pinpointRequestId String? // RequestId is the Pinpoint request id. One request can contain multiple text messages.
  pinpointMessageId String? // MessageId is the email message id.
  pinpointResponse  Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@schema("microservice/notification")
}

model SmsNotification {
  id                Int      @id @default(autoincrement())
  payload           Json //  The notification content for one phone.
  pinpointRequestId String? // RequestId is the Pinpoint request id. One request can contain multiple text messages.
  pinpointMessageId String? // MessageId is the text message id.
  pinpointResponse  Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@schema("microservice/notification")
}

// ! ------------------------------------------------------------ //
// !           [Microservice] Task Management models              //
// ! ------------------------------------------------------------ //
// * Task                                                         //
// * ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄  //

model Task {
  id           Int       @id @default(autoincrement())
  type         TaskType
  group        String? // Provided by task microservice's client.
  payload      Json // Task content
  state        TaskState @default(PENDING)
  sqsMessageId String?
  sqsResponse  Json?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@schema("microservice/task")
}

enum TaskType {
  DATATRANS_BATCH_PROCESSING
  DATATRANS_STREAM_PROCESSING

  @@schema("microservice/task")
}

enum TaskState {
  PENDING
  SUCCEEDED
  FAILED
  CANCELED

  @@schema("microservice/task")
}

// ! ------------------------------------------------------------ //
// !                [Application] Account models                  //
// ! ------------------------------------------------------------ //
// * User                                                         //
// * UserJwt                                                      //
// * UserProfile                                                  //
// * VerificationCode                                             //
// * Organization                                                 //
// * Role                                                         //
// * RoutePermission(unused)                                      //
// * ComponentPermission(unused)                                  //
// * EndpointPermission(unused)                                   //
// * Permission                                                   //
// * UserToRole                                                   //
// * UserToPermission                                             //
// * RoleToPermission                                             //
// * ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄  //

model User {
  // [1] The 'User' and 'VerificationCode' models are both used for logging in.
  // [2] The 'User' is designed for long-term use and the 'VerificationCode' is designed for short-term use.
  // [3] Actually, the 'User' model should be named 'UserPassword' and the 'VerificationCode' should be named 'UserVerificationCode'.

  id          String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String?            @unique
  phone       String?            @unique
  username    String?            @unique
  password    String? // automatic hashing
  status      UserStatus         @default(ACTIVE)
  lastLoginAt DateTime?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  profiles    UserProfile[]
  permissions UserToPermission[]
  roles       UserToRole[]

  @@schema("application/account")
}

enum UserStatus {
  ACTIVE
  INACTIVE

  @@schema("application/account")
}

model UserJwt {
  id        Int           @id @default(autoincrement())
  userId    String        @db.Uuid
  token     String
  status    UserJwtStatus
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@schema("application/account")
}

enum UserJwtStatus {
  ACTIVE
  INACTIVE

  @@schema("application/account")
}

model UserProfile {
  id             String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  givenName      String?
  middleName     String?
  familyName     String?
  suffix         String?
  birthday       DateTime?
  gender         String?
  race           UserProfileRaceType?
  ethnicity      UserProfileEthnicityType?
  hasPCP         Boolean? // Primary Care Physician  
  address        String?
  zipcode        String?
  geoJSON        Json? // https://datatracker.ietf.org/doc/html/rfc7946
  websites       Json? // {'facebook': 'https://www.facebook.com/grace', 'twitter': 'https://twitter.com/elonmusk'}
  picture        String?
  organizationId String?                   @db.Uuid
  createdAt      DateTime                  @default(now())
  updatedAt      DateTime                  @updatedAt
  user           User                      @relation(fields: [userId], references: [id])
  userId         String                    @db.Uuid

  @@schema("application/account")
}

enum UserProfileRaceType {
  AA
  WHITE
  ASIAN
  MULTI
  OTHER

  @@schema("application/account")
}

enum UserProfileEthnicityType {
  HISPANIC
  NOT_HISPANIC

  @@schema("application/account")
}

model VerificationCode {
  id        Int                    @id @default(autoincrement())
  email     String?
  phone     String?
  code      String
  status    VerificationCodeStatus
  use       VerificationCodeUse
  expiredAt DateTime
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt

  @@schema("application/account")
}

enum VerificationCodeStatus {
  ACTIVE
  INACTIVE

  @@schema("application/account")
}

enum VerificationCodeUse {
  UNKNOWN
  // For generating JWT.
  LOGIN_BY_EMAIL
  LOGIN_BY_PHONE
  // For closing and recovering account.
  CLOSE_ACCOUNT_BY_EMAIL
  CLOSE_ACCOUNT_BY_PHONE
  RECOVER_ACCOUNT_BY_EMAIL
  RECOVER_ACCOUNT_BY_PHONE
  // For other operations
  BIND_EMAIL
  BIND_PHONE
  CHANGE_PASSWORD
  RESET_PASSWORD

  @@schema("application/account")
}

model Organization {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roles     Role[]

  @@schema("application/account")
}

model Role {
  // A role is a subgroup of a user group with some specified permissions.

  id             String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  organization   Organization?      @relation(fields: [organizationId], references: [id])
  organizationId String?            @db.Uuid
  permissions    RoleToPermission[]
  users          UserToRole[]

  @@unique([name, organizationId])
  @@schema("application/account")
}

enum ReservedRole {
  SUPER
  SUPER_ADMINISTRATOR

  @@schema("application/account")
}

enum TrustedEntityType {
  USER_GROUP
  ROLE
  USER

  @@schema("application/account")
}

model RoutePermission {
  id                String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  route             String
  trustedEntityType TrustedEntityType
  trustedEntityId   String            @db.Uuid
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@schema("application/account")
}

model ComponentPermission {
  id                String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  component         String
  trustedEntityType TrustedEntityType
  trustedEntityId   String            @db.Uuid
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@schema("application/account")
}

model EndpointPermission {
  id                String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  endpoint          String
  trustedEntityType TrustedEntityType
  trustedEntityId   String            @db.Uuid
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@schema("application/account")
}

model Permission {
  // Permission of Resource

  id        String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  resource  String // Set this field with a database table name
  action    PermissionAction
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  roles     RoleToPermission[]
  users     UserToPermission[]

  @@schema("application/account")
}

enum PermissionAction {
  ANY
  CREATE
  DELETE
  SELECT
  UPDATE

  @@schema("application/account")
}

model UserToRole {
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid
  role      Role     @relation(fields: [roleId], references: [id])
  roleId    String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, roleId])
  @@schema("application/account")
}

model UserToPermission {
  user         User       @relation(fields: [userId], references: [id])
  userId       String     @db.Uuid
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String     @db.Uuid
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@id([userId, permissionId])
  @@schema("application/account")
}

model RoleToPermission {
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       String     @db.Uuid
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String     @db.Uuid
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@id([roleId, permissionId])
  @@schema("application/account")
}

// ! ------------------------------------------------------------ //
// !          [Application] Project Management models             //
// ! ------------------------------------------------------------ //
// * Project                                                      //
// * ProjectCheckpoint                                            //
// * ProjectEnvironment                                           //
// * InfrastructureStack                                          //
// * ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄  //

model Project {
  id                   String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String                @unique
  state                ProjectState          @default(PLANNING)
  clientName           String?
  clientEmail          String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  checkpoints          ProjectCheckpoint[]
  environments         ProjectEnvironment[]
  cloudformationStacks CloudFormationStack[]
  pulumiStacks         PulumiStack[]

  @@schema("application/pmgmt")
}

enum ProjectState {
  PLANNING
  DESIGNING
  DEVELOPING
  DONE

  @@schema("application/pmgmt")
}

model ProjectCheckpoint {
  id        Int                    @id @default(autoincrement())
  type      ProjectCheckpointType
  state     ProjectCheckpointState @default(TODO)
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt
  Project   Project                @relation(fields: [projectId], references: [id])
  projectId String                 @db.Uuid

  @@unique([type, projectId])
  @@schema("application/pmgmt")
}

enum ProjectCheckpointType {
  MANAGER_PRODUCT_REQUIREMENTS
  MANAGER_PROJECT_KANBAN
  DESIGNER_WIREFRAMES
  DESIGNER_PROTOTYPES
  DEVELOPER_ACCOUNT_APPLE
  DEVELOPER_ACCOUNT_GOOGLE
  DEVELOPER_BACKEND_REPO
  DEVELOPER_BACKEND_FRAMEWORK
  DEVELOPER_BACKEND_DATABASE
  DEVELOPER_BACKEND_API
  DEVELOPER_FRONTEND_REPO
  DEVELOPER_FRONTEND_FRAMEWORK
  DEVELOPER_INFRASTRUCTURE

  @@schema("application/pmgmt")
}

enum ProjectCheckpointState {
  TODO
  PROCESSING
  DONE

  @@schema("application/pmgmt")
}

model ProjectEnvironment {
  id                  Int                    @id @default(autoincrement())
  type                ProjectEnvironmentType
  awsAccountId        String?
  awsProfile          String?
  awsAccessKeyId      String?
  awsSecretAccessKey  String? // automatic hashing
  awsRegion           String?
  s3ForCloudformation String?
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  project             Project                @relation(fields: [projectId], references: [id])
  projectId           String                 @db.Uuid

  @@unique([type, projectId])
  @@schema("application/pmgmt")
}

enum ProjectEnvironmentType {
  DEVELOPMENT
  STAGING
  PRODUCTION

  @@schema("application/pmgmt")
}

model CloudFormationStack {
  id                  String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String?                  @unique // Set default value via prisma middleware.
  type                CloudFormationStackType
  params              Json?
  state               CloudFormationStackState @default(PENDING)
  environment         ProjectEnvironmentType
  createStackOutput   Json?
  describeStackOutput Json?
  deleteStackOutput   Json?
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
  project             Project                  @relation(fields: [projectId], references: [id])
  projectId           String                   @db.Uuid

  @@schema("application/pmgmt")
}

enum CloudFormationStackType {
  CICD_BUILD
  CICD_PIPELINE
  CICD_REPOSITORY
  COMPUTING_FARGATE
  NETWORK_HIPAA
  PRODUCT_DATA_ENGINE
  PRODUCT_MESSAGE_TRACKER

  @@schema("application/pmgmt")
}

enum CloudFormationStackState {
  PENDING
  BUILD
  DESTROYED

  @@schema("application/pmgmt")
}

model PulumiStack {
  id            String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String?                @unique // Set default value via prisma middleware.
  type          PulumiStackType
  params        Json?
  state         PulumiStackState       @default(PENDING)
  environment   ProjectEnvironmentType
  upResult      Json?
  destroyResult Json?
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  project       Project                @relation(fields: [projectId], references: [id])
  projectId     String                 @db.Uuid

  @@schema("application/pmgmt")
}

enum PulumiStackType {
  AWS_CLOUDFRONT
  AWS_CODE_COMMIT
  AWS_ECR
  AWS_ECS
  AWS_EKS
  AWS_IAM_USER
  AWS_RDS
  AWS_S3
  AWS_SQS
  AWS_VPC
  AWS_WAF
  COMPUTING_FARGATE
  NETWORK_HIPAA

  @@schema("application/pmgmt")
}

enum PulumiStackState {
  PENDING
  BUILD_PROCESSING
  BUILD_SUCCEEDED
  BUILD_FAILED
  DESTROY_PROCESSING
  DESTROY_SUCCEEDED
  DESTROY_FAILED

  @@schema("application/pmgmt")
}

// ! ------------------------------------------------------------ //
// !               [Application] Engine D models                  //
// ! ------------------------------------------------------------ //
// * PostgresqlDatasource                                         //
// * PostgresqlDatasourceConstraint                               //
// * PostgresqlDatasourceTable                                    //
// * PostgresqlDatasourceTableColumn                              //
// * ------------------------------------------------------------ //
// * ElasticsearchDatasource                                      //
// * ElasticsearchDatasourceIndex                                 //
// * ElasticsearchDatasourceIndexField                            //
// * ------------------------------------------------------------ //
// * DatatransPipeline                                            //
// * DatatransMission                                             //
// * ------------------------------------------------------------ //
// * ElasticsearchDataboard                                       //
// * ElasticsearchDataboardColumn                                 //
// * ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄  //

model PostgresqlDatasource {
  id          String                           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  host        String
  port        Int
  database    String
  schema      String
  state       PostgresqlDatasourceState        @default(NOT_LOADED)
  createdAt   DateTime                         @default(now())
  updatedAt   DateTime                         @updatedAt
  tables      PostgresqlDatasourceTable[]
  constraints PostgresqlDatasourceConstraint[]

  @@schema("application/engined")
}

enum PostgresqlDatasourceState {
  LOADED
  NOT_LOADED

  @@schema("application/engined")
}

model PostgresqlDatasourceConstraint {
  id           Int                                   @id @default(autoincrement())
  schema       String // The schema name.
  table        String // The table name.
  keyColumn    String // The table's primary key column or foreign key column.
  keyType      PostgresqlDatasourceConstraintKeyType
  foreignTable String? // Has value when the type is FOREIGN_KEY. 
  createdAt    DateTime                              @default(now())
  updatedAt    DateTime                              @updatedAt
  datasource   PostgresqlDatasource                  @relation(fields: [datasourceId], references: [id], onDelete: Cascade)
  datasourceId String                                @db.Uuid

  @@schema("application/engined")
}

enum PostgresqlDatasourceConstraintKeyType {
  PRIMARY_KEY
  FOREIGN_KEY

  @@schema("application/engined")
}

model PostgresqlDatasourceTable {
  id                 Int                               @id @default(autoincrement())
  name               String
  schema             String
  createdAt          DateTime                          @default(now())
  updatedAt          DateTime                          @updatedAt
  datasource         PostgresqlDatasource              @relation(fields: [datasourceId], references: [id], onDelete: Cascade)
  datasourceId       String                            @db.Uuid
  columns            PostgresqlDatasourceTableColumn[]
  datatransPipelines DatatransPipeline[]

  @@schema("application/engined")
}

model PostgresqlDatasourceTableColumn {
  id              Int                       @id @default(autoincrement())
  name            String // The column name.
  type            String
  constraint      String?
  ordinalPosition Int? // The sort number of the column in the table.
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
  table           PostgresqlDatasourceTable @relation(fields: [tableId], references: [id], onDelete: Cascade)
  tableId         Int

  @@schema("application/engined")
}

model ElasticsearchDatasource {
  id        String                         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  node      String
  state     ElasticsearchDatasourceState   @default(NOT_LOADED)
  createdAt DateTime                       @default(now())
  updatedAt DateTime                       @updatedAt
  indices   ElasticsearchDatasourceIndex[]

  @@schema("application/engined")
}

enum ElasticsearchDatasourceState {
  LOADED
  NOT_LOADED

  @@schema("application/engined")
}

model ElasticsearchDatasourceIndex {
  id                 Int                                 @id @default(autoincrement())
  name               String
  state              ElasticsearchDatasourceIndexState   @default(NO_MAPPING)
  createdAt          DateTime                            @default(now())
  updatedAt          DateTime                            @updatedAt
  datasource         ElasticsearchDatasource             @relation(fields: [datasourceId], references: [id], onDelete: Cascade)
  datasourceId       String                              @db.Uuid
  fields             ElasticsearchDatasourceIndexField[]
  databoards         ElasticsearchDataboard[]
  datatransPipelines DatatransPipeline[]

  @@schema("application/engined")
}

enum ElasticsearchDatasourceIndexState {
  NO_MAPPING
  HAS_MAPPING

  @@schema("application/engined")
}

model ElasticsearchDatasourceIndexField {
  id               Int                            @id @default(autoincrement())
  name             String // The field name. 
  type             String?
  fields           Json?
  properties       Json?
  createdAt        DateTime                       @default(now())
  updatedAt        DateTime                       @updatedAt
  index            ElasticsearchDatasourceIndex   @relation(fields: [indexId], references: [id], onDelete: Cascade)
  indexId          Int
  databoardColumns ElasticsearchDataboardColumn[]

  @@schema("application/engined")
}

model DatatransPipeline {
  id                String                       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String
  hasManyTables     String[] // The child tables should be loaded into the payload to be transported.
  belongsToTables   String[] // The parent tables should be loaded into the payload to be transported.
  createdAt         DateTime                     @default(now())
  updatedAt         DateTime                     @updatedAt
  fromTable         PostgresqlDatasourceTable    @relation(fields: [fromTableId], references: [id], onDelete: Cascade)
  fromTableId       Int
  toIndex           ElasticsearchDatasourceIndex @relation(fields: [toIndexId], references: [id])
  toIndexId         Int
  datatransMissions DatatransMission[]

  @@schema("application/engined")
}

model DatatransMission {
  id                  String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  state               DatatransMissionState @default(PENDING)
  numberOfRecords     Int // Number of records that will be sent from datasource table
  numberOfBatches     Int
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  datatransPipeline   DatatransPipeline     @relation(fields: [datatransPipelineId], references: [id])
  datatransPipelineId String                @db.Uuid

  @@schema("application/engined")
}

enum DatatransMissionState {
  PENDING
  STARTED
  STOPPED

  @@schema("application/engined")
}

model ElasticsearchDataboard {
  id                String                         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String
  state             ElasticsearchDataboardState    @default(NOT_LOADED)
  description       String?
  createdAt         DateTime                       @default(now())
  updatedAt         DateTime                       @updatedAt
  datasourceIndex   ElasticsearchDatasourceIndex   @relation(fields: [datasourceIndexId], references: [id])
  datasourceIndexId Int
  columns           ElasticsearchDataboardColumn[]

  @@schema("application/engined")
}

enum ElasticsearchDataboardState {
  LOADED
  NOT_LOADED

  @@schema("application/engined")
}

model ElasticsearchDataboardColumn {
  id                     Int                                   @id @default(autoincrement())
  name                   String
  ordinalPosition        Int? // The sort number of the column on the board. The first position is 1.
  visible                Boolean                               @default(true)
  width                  Int?
  copyable               Boolean?
  searchable             Boolean?
  sortable               Boolean?
  tooltip                String?
  formatter              ElasticsearchDataboardColumnFormatter @default(NONE)
  createdAt              DateTime                              @default(now())
  updatedAt              DateTime                              @updatedAt
  databoard              ElasticsearchDataboard                @relation(fields: [databoardId], references: [id], onDelete: Cascade)
  databoardId            String                                @db.Uuid
  datasourceIndexField   ElasticsearchDatasourceIndexField     @relation(fields: [datasourceIndexFieldId], references: [id])
  datasourceIndexFieldId Int

  @@schema("application/engined")
}

enum ElasticsearchDataboardColumnFormatter {
  NONE
  OVER_DUE
  PAST_DUE
  DATE_TIME
  HIGHLIGHT_INCOMPLETE
  CURRENCY

  @@schema("application/engined")
}

// ! ------------------------------------------------------------ //
// !             [Application] Harley-Davidson models             //
// ! ------------------------------------------------------------ //
// * Candidate                                                    //
// * CandidateCertification                                       //
// * CandidateTraining                                            //
// * CandidateTestinging                                             //
// * Job                                                          //
// * JobApplication                                               //
// * JobApplicationNote                                           //
// * JobApplicationTask                                           //
// * JobApplicationTest                                           //
// * ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄  //

model Candidate {
  id              String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status          CandidateStatus          @default(ACTIVE)
  email           String?                  @unique
  phone           String?                  @unique
  givenName       String?
  middleName      String?
  familyName      String?
  suffix          String?
  birthday        DateTime?
  gender          String?
  address         String?
  zipcode         String?
  geoJSON         Json? // https://datatracker.ietf.org/doc/html/rfc7946
  websites        Json? // {'facebook': 'https://www.facebook.com/grace', 'twitter': 'https://twitter.com/elonmusk'}
  picture         String?
  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @updatedAt
  certifications  CandidateCertification[]
  trainings       CandidateTraining[]
  testings        CandidateTesting[]
  jobApplications JobApplication[]

  @@schema("application/recruitment")
}

enum CandidateStatus {
  ACTIVE
  INACTIVE

  @@schema("application/recruitment")
}

model CandidateCertification {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId String    @db.Uuid

  @@schema("application/recruitment")
}

model CandidateTraining {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId String    @db.Uuid

  @@schema("application/recruitment")
}

model CandidateTesting {
  id                  Int                   @id @default(autoincrement())
  type                CandidateTestingType
  state               CandidateTestingState @default(PENDING)
  appointmentStartsAt DateTime?
  appointmentEndsAt   DateTime?
  appointmentLocation String?
  report              String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  candidate           Candidate             @relation(fields: [candidateId], references: [id])
  candidateId         String                @db.Uuid

  @@schema("application/recruitment")
}

enum CandidateTestingType {
  POET
  ME_DS

  @@schema("application/recruitment")
}

enum CandidateTestingState {
  PENDING
  PASSED
  REJECTED
  SEND_TO_REVIEW

  @@schema("application/recruitment")
}

model Job {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  position        String
  description     String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  jobApplications JobApplication[]

  @@schema("application/recruitment")
}

model JobApplication {
  id              String                         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  reviewCode      JobApplicationReviewCode?
  createdAt       DateTime                       @default(now())
  updatedAt       DateTime                       @updatedAt
  candidate       Candidate                      @relation(fields: [candidateId], references: [id])
  candidateId     String                         @db.Uuid
  job             Job                            @relation(fields: [jobId], references: [id])
  jobId           String                         @db.Uuid
  processingSteps JobApplicationProcessingStep[]
  tasks           JobApplicationTask[]
  notes           JobApplicationNote[]

  @@schema("application/recruitment")
}

enum JobApplicationReviewCode {
  MED_DS
  MED_CLR

  @@schema("application/recruitment")
}

model JobApplicationProcessingStep {
  id               Int                                @id @default(autoincrement())
  action           JobApplicationProcessingStepAction
  state            JobApplicationProcessingStepState  @default(PENDING)
  handlerUserId    String?                            @db.Uuid
  handlerComment   String?
  createdAt        DateTime                           @default(now())
  updatedAt        DateTime                           @updatedAt
  jobApplication   JobApplication                     @relation(fields: [jobApplicationId], references: [id])
  jobApplicationId String                             @db.Uuid

  @@unique([action, jobApplicationId])
  @@schema("application/recruitment")
}

enum JobApplicationProcessingStepAction {
  STEP1_DISPATCH
  STEP2_TESTING
  STEP3_REVIEW

  @@schema("application/recruitment")
}

enum JobApplicationProcessingStepState {
  PENDING
  PROCESSING
  DONE

  @@schema("application/recruitment")
}

model JobApplicationNote {
  id               Int            @id @default(autoincrement())
  reporterUserId   String         @db.Uuid
  reporterComment  String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  jobApplication   JobApplication @relation(fields: [jobApplicationId], references: [id])
  jobApplicationId String         @db.Uuid

  @@schema("application/recruitment")
}

model JobApplicationTask {
  id               Int                     @id @default(autoincrement())
  reporterUserId   String                  @db.Uuid
  reporterComment  String
  assigneeUserId   String                  @db.Uuid
  state            JobApplicationTaskState @default(PENDING)
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt
  jobApplication   JobApplication          @relation(fields: [jobApplicationId], references: [id])
  jobApplicationId String                  @db.Uuid

  @@schema("application/recruitment")
}

enum JobApplicationTaskState {
  PENDING
  DONE

  @@schema("application/recruitment")
}
