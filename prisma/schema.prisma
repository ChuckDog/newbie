// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"

  // Enable Full-Text Search which is only available for PostgreSQL.
  previewFeatures = ["multiSchema", "fullTextSearch"]

  // For production deployment.
  // binaryTargets   = ["native", "rhel-openssl-1.0.x"]
  // binaryTargets   = ["native", "linux-arm64-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["microservice/location", "microservice/notification", "microservice/task", "microservice/verification-code", "microservice/workflow"]
}

// !! ------------------------------------------------------------ //
// !!            [Microservice] Location models                    //
// !! ------------------------------------------------------------ //
// * Location                                                      //
// * ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ //

model Location {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  site      String?
  address   String?
  address2  String?
  city      String?
  state     String?
  zipcode   String?
  geoJSON   Json? // https://datatracker.ietf.org/doc/html/rfc7946
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@schema("microservice/location")
}

// !! ------------------------------------------------------------ //
// !!            [Microservice] Notification models                //
// !! ------------------------------------------------------------ //
// * EmailNotification                                             //
// * SmsNotification                                               //
// * ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ //

model EmailNotification {
  id                Int      @id @default(autoincrement())
  payload           Json // The notification content for one email address.
  pinpointRequestId String? // RequestId is the Pinpoint request id. One request can contain multiple text messages.
  pinpointMessageId String? // MessageId is the email message id.
  pinpointResponse  Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@schema("microservice/notification")
}

model SmsNotification {
  id                Int      @id @default(autoincrement())
  payload           Json // The notification content for one phone.
  pinpointRequestId String? // RequestId is the Pinpoint request id. One request can contain multiple text messages.
  pinpointMessageId String? // MessageId is the text message id.
  pinpointResponse  Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@schema("microservice/notification")
}

// ! ------------------------------------------------------------ //
// !           [Microservice] Task Management models              //
// ! ------------------------------------------------------------ //
// * Task (This is an example model.)                             //
// * ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄  //

model Task {
  id           Int       @id @default(autoincrement())
  state        TaskState @default(PENDING)
  group        String? // Provided by task microservice's client.
  payload      Json // Task content
  sqsMessageId String?
  sqsResponse  Json?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@schema("microservice/task")
}

enum TaskState {
  PENDING
  DONE

  @@schema("microservice/task")
}

// ! ------------------------------------------------------------ //
// !           [Microservice] Verification Code models            //
// ! ------------------------------------------------------------ //
// * VerificationCode                                             //
// * ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄  //

model VerificationCode {
  id        Int                    @id @default(autoincrement())
  email     String?
  phone     String?
  code      String
  status    VerificationCodeStatus
  use       VerificationCodeUse
  expiredAt DateTime
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt

  @@schema("microservice/verification-code")
}

enum VerificationCodeStatus {
  ACTIVE
  INACTIVE

  @@schema("microservice/verification-code")
}

enum VerificationCodeUse {
  UNKNOWN
  // For generating JWT.
  LOGIN_BY_EMAIL
  LOGIN_BY_PHONE
  // For closing and recovering account.
  CLOSE_ACCOUNT_BY_EMAIL
  CLOSE_ACCOUNT_BY_PHONE
  RECOVER_ACCOUNT_BY_EMAIL
  RECOVER_ACCOUNT_BY_PHONE
  // For other operations
  BIND_EMAIL
  BIND_PHONE
  CHANGE_PASSWORD
  RESET_PASSWORD

  @@schema("microservice/verification-code")
}

// ! ------------------------------------------------------------ //
// !             [Microservice] Workflow models                   //
// ! ------------------------------------------------------------ //
// * WorkflowStep                                                 //
// * WorkflowState                                                //
// * WorkflowRoute                                                //
// * ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄  //

model WorkflowStep {
  id        Int      @id @default(autoincrement())
  step      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@schema("microservice/workflow")
}

model WorkflowState {
  id        Int      @id @default(autoincrement())
  state     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@schema("microservice/workflow")
}

model WorkflowRoute {
  id         Int      @id @default(autoincrement())
  startSign  Boolean? @unique
  step       String
  state      String
  nextStep   String
  nextRoleId String?  @db.Uuid // The next role to take over the next step.
  nextUserId String?  @db.Uuid // The next user to take over the next step.
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([step, state])
  @@schema("microservice/workflow")
}
